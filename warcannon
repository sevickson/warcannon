#! /bin/bash

deploy () {
	ERR=0;
	if [[ ! -f $(which jsonnet) ]]; then
		ERR=1;
		echo "Error: Must have 'jsonnet' command installed.";
	fi

	if [[ ! -f $(which jq) ]]; then
		ERR=1;
		echo "Error: Must have 'jq' command installed.";
	fi

	if [[ ! -f $(which aws) ]]; then
		ERR=1;
		echo "Error: Must have AWSCLI installed.";
	fi

	if [[ ! -f $(which npm) ]]; then
		ERR=1;
		echo "Error: Must have NPM installed.";
	fi

	if [[ ! -f $(which terraform) ]]; then
		ERR=1;
		echo "Error: Must have Terraform installed.";
	fi

	if [[ "$(terraform -v | grep v0.11 | wc -l)" != "1" ]]; then
		ERR=1;
		echo "Error: Wrong version of Terraform is installed. Warcannon requires Terraform v0.11.";
	fi

	if [[ "$ERR" == "1" ]]; then
		echo -e "\nInstall missing components, then try again.\n"
		exit 1
	fi

	POPULATEATHENA=0
	[[ ! -d .terraform ]] && POPULATEATHENA=1

	echo "[*] Preparing to deploy the WARCannon"

	BUCKET=$(jq -r '.backendBucket' settings.json 2> /dev/null)

	if [[ "$BUCKET" == "" ]]; then
		echo "No backend bucket is specified in settings.json. This is best practice and required for WARCannon."
		echo "If you specify a bucket that doesn't exist, WARCannon will create it for you. How easy is that?"
		echo "Update settings.json and try again."
		echo ""
		exit 1
	fi

	EXISTS=$(aws --profile $(jq -r '.awsProfile' settings.json) s3api get-bucket-location --bucket $BUCKET)
	if [[ $? -ne 0 ]]; then
		aws --profile $(jq -r '.awsProfile' settings.json) s3api create-bucket --bucket $BUCKET --create-bucket-configuration LocationConstraint=us-east-1

		if [[ $? -ne 0 ]]; then
			echo "Error creating backendBucket. Fix that^ error then try again."
			exit 1
		fi
	else
		if [[ $( curl -s --head $BUCKET.s3.amazonaws.com | grep us-east-1 | wc -l ) -eq 0 ]]; then
			echo "The backendBucket you specified doesn't reside in us-east-1."
			exit 1
		fi
	fi

	if [[ ! -f regions.json ]]; then
		echo "[*] Getting availabilityzones from AWS"
		# Get the availability zones for each region
		echo "[*] - us-east-1"
		aws --profile $(jq -r '.awsProfile' settings.json) ec2 --region us-east-1 \
			describe-availability-zones | jq '{"us-east-1": [.AvailabilityZones[] | select(.State=="available") | .ZoneName]}' | jq '{"regions": .}' > regions.json
	fi

	echo "[*] Checking service-linked roles for EC2 spot fleets"
	aws --profile $(jq -r '.awsProfile' settings.json) iam get-role --role-name AmazonEC2SpotFleetRole > /dev/null
	if [[ $? -eq 255 ]]; then
		echo "[+] Creating service-linked roles for EC2 spot fleets"
		aws --profile $(jq -r '.awsProfile' settings.json) iam create-role --role-name AmazonEC2SpotFleetRole \
			--assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Sid":"","Effect":"Allow","Principal":{"Service":"spotfleet.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
		aws --profile $(jq -r '.awsProfile' settings.json) iam attach-role-policy \
			--policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole --role-name AmazonEC2SpotFleetRole
		aws --profile $(jq -r '.awsProfile' settings.json) iam create-service-linked-role --aws-service-name spot.amazonaws.com
		aws --profile $(jq -r '.awsProfile' settings.json) iam create-service-linked-role --aws-service-name spotfleet.amazonaws.com
	fi

	echo "[*] Generating combined settings file"
	jq -s '.[0] * .[1]' settings.json regions.json > generated-settings.jsonnet

	rm -f *.tf.json spot_request.json
	echo "[*] Generating Terraform configurations"
	# Generate terraform configs
	jsonnet -m . terraform.jsonnet

	if [[ $? -ne 0 ]]; then
		echo "[!] Jsonnet failed. Unable to proceed."
		exit 1
	fi

	[[ ! -d .terraform ]] && $TERBIN init
	terraform apply -auto-approve

	if [[ $? -ne 0 ]]; then
		echo "[!] Terraform failed. Unable to proceed."
		exit 1
	fi

	if [[ "$POPULATEATHENA" == "1" ]]; then
		./populate_athena.sh
	fi
}

clearResults () {

	RESULTCOUNT=`aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 s3 ls s3://$(terraform output results_bucket) | wc -l`
	aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 \
		s3 rm s3://`terraform output results_bucket` --recursive

	echo -e "[+] Deleted [ \e[34m$RESULTCOUNT\e[0m ] files from S3."
}

emptySqs () {
	AWSACCOUNT=`aws --profile $(jq -r '.awsProfile' settings.json) sts get-caller-identity | jq -r '.Account'`
	QUEUELENGTH=`aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 \
		sqs get-queue-attributes --queue-url "https://sqs.us-east-1.amazonaws.com/${AWSACCOUNT}/warcannon_queue" \
		--attribute-names ApproximateNumberOfMessages | jq -r '.Attributes.ApproximateNumberOfMessages'`

	if [[ "$QUEUELENGTH" -eq 0 ]]; then
		echo "[*] Queue is already empty."
		exit 1
	fi

	aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 \
		sqs purge-queue --queue-url "https://sqs.us-east-1.amazonaws.com/${AWSACCOUNT}/warcannon_queue"

	echo -e "[+] Cleared [ \e[34m${QUEUELENGTH}\e[0m ] messages from the queue";
}

fire () {
	if [ settings.json -nt spot_request.json ];  then
		echo -e "[!] \e[36msettings.json\e[0m has been changed since the last deploy."
		echo -e "    run \e[34m$0 \e[36mdeploy\e[0m and then try again."
		exit 1
	fi

	if [ lambda_function/warcannon/matches.js -nt spot_request.json ];  then
		echo -e "[!] \e[36mmatches.js\e[0m has been changed since the last deploy."
		echo -e "    run \e[34m$0 \e[36mdeploy\e[0m and then try again."
		exit 1
	fi

	AWSACCOUNT=`aws --profile $(jq -r '.awsProfile' settings.json) sts get-caller-identity | jq -r '.Account'`
	QUEUELENGTH=`aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 \
		sqs get-queue-attributes --queue-url "https://sqs.us-east-1.amazonaws.com/${AWSACCOUNT}/warcannon_queue" \
		--attribute-names ApproximateNumberOfMessages | jq -r '.Attributes.ApproximateNumberOfMessages'`

	if [[ "$QUEUELENGTH" -eq 0 ]]; then
		echo "Yeah, no tho. Queue length is zero. Populate the queue first."
		exit 1
	fi

	VALIDUNTIL=$((`date "+%s"` + `jq -r '.nodeMaxDuration' settings.json`))
	NODES=`cat settings.json | jq -r '.nodeInstanceType | join(", ")'`;
	CAPACITY=`cat settings.json | jq '.nodeCapacity'`;
	DURATION=`cat settings.json | jq '.nodeMaxDuration'`;
	STATUSURL=`terraform output cloudfront_url`

	echo -e "[!] This will request [ \e[34m${CAPACITY}\e[0m ] spot instances of type [ \e[34m${NODES}\e[0m ]"
	echo -e "    lasting for [ \e[34m${DURATION}\e[0m ] seconds."
	echo
	echo -e "To change this, edit your settings in \e[36msettings.json\e[0m and run \e[34m$0 \e[36mdeploy\e[0m"
	read -r -p "--> Ready to fire? [Yes]: " key

	if [[ "$key" != "Yes" ]]; then
		echo "Only 'Yes' will be accepted"
		echo ""

		exit 1
	fi

	cat spot_request.json | jq ". += {\"ValidUntil\":$VALIDUNTIL}" > tmp_request.json

	aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 ec2 request-spot-fleet \
		--spot-fleet-request-config file://tmp_request.json
	rm tmp_request.json

	echo "[+] Spot fleet request has been sent, and nodes should start coming online within ~5 minutes."
	echo -e "    Monitor node status and progress at \e[34mhttps://${STATUSURL}\e[0m"
	echo
}

showBanner () {

	if [[ $(tput cols) -lt 200 && $(tput cols) -gt 79 ]]; then
		echo
		echo "((((((  /((((   ((((((  ((((((/     ((((((((((*     /((((((((("
		echo "((((((  ((((((  (((((  ((((((((     ((((((((((((  ((((((((((( "
		echo " (((((/#(((((( (((((( *(((((((((    (((((/ (((((*((((((       "
		echo "  ((((((((((((((((((  ((((( (((((   (((((((((((  ((((((       "
		echo "  ((((((((  (((((((/ (((((((((((((  (((((((((((  /((((((((((( "
		echo "   ((((((/  #(((((# (((((*   (((((# (((((/ ((((((  ((((((((((("
		echo "         @@@@@@    %@@@@@/  &@@@@@ @@@@@@   @@@@@   @@@@@@@@@@@* @@@@@    @@@@@"
		echo "        @@@@@@@&   %@@@@@@% &@@@@@ @@@@@@@  @@@@@ &@@@@@@@@@@@@* @@@@@@   @@@@@"
		echo "       @@@@@@@@@(  %@@@@@@@@&@@@@@ @@@@@@@@*@@@@@ @@@@@     @@@@ @@@@@@@@*@@@@@"
		echo "      @@@@@ @@@@@* %@@@@@@@@@@@@@@ @@@@@@@@@@@@@@ @@@@@     @@@@ @@@@@@@@@@@@@@"
		echo "     @@@@@**(@@@@@ %@@@@@  @@@@@@@ @@@@@  @@@@@@@ @@@@@@@@@@@@@/ @@@@@   @@@@@@"
		echo "   *@@@@@####@@@@@%%@@@@@*  @@@@@@ @@@@@*  @@@@@@   @@@@@@@@@%   @@@@@*   @@@@@"
		echo
		echo
	fi

	if [[ $(tput cols) -ge 200 ]]; then
		echo "                                                                                                                                                     "
		echo "     ((((((  /((((   ((((((  ((((((/     ((((((((((*     /(((((((((      @@@@@@     %@@@@@/  &@@@@@ @@@@@@   @@@@@/    @@@@@@@@@*    @@@@@@   @@@@@  "
		echo "     ((((((  ((((((  (((((  ((((((((     ((((((((((((  (((((((((((*     @@@@@@@&    %@@@@@@% &@@@@@ @@@@@@@  @@@@@/ &@@@@@@@@@@@@@@  @@@@@@@  @@@@@  "
		echo "      (((((/#(((((( (((((( *(((((((((    (((((/ (((((*((((((           @@@@@@@@@(   %@@@@@@@@&@@@@@ @@@@@@@@*@@@@@/@@@@@@     @@%/****(#%%(***&@@@@  "
		echo "       ((((((((((((((((((  ((((( (((((   (((((((((((  ((((((          @@@@@ @@@@@*  %@@@@@@@@@@@@@@ @@@@@%@@@@@@@@/@#/****(##(%%%#/********##*@@@@@  "
		echo "       ((((((((  (((((((/ (((((((((((((  (((((((((((  /(((((((((((   @@@#***(###/% ####**( @@@@@@@# ***/*****/######%%%(***********#(***(& #@@@@@@@  "
		echo "        ((((((/  #(((((# (((((*   (((((# (((((/ ((((((  ((((((((****###(/########/%/#####%**((****/#*#/#*%*##*************(%***/@%   @@@@@  /@@@@@@  "
		echo "                                                         **/#(******//((#########**/######/**//***  *# #*********/#***                               "
		echo "                                                  */#(*(****** ((/*%(****## *###*##**#####%*#(***(#/**#*#*****                   *                   "
		echo "                                                *#* **********#**#((*%*##( **/##/*#/(*#####%**###****(****                     #                     "
		echo "                                              **/%*/**/******#**/##%(#/** *#**/##*##***####%/********(##/                    #*                      "
		echo "                                          */%((*/*(*#*******%%%%*#((#*%** *****/##*##**/####%******%( ###*##           /###(                         "
		echo "                                         *#(**(#(**(%%%%(*****%%*#*%(*%%#%%%%(**/#/**#**#(####%******/###/*#*###   #*# *             /               "
		echo "                                      *  %%%%#* * * ####(%#*#%*(*/##**%%%%%%%%#***####/**#*###############*  #/# *# #(          (#                   "
		echo "                              (/    #  **##*######/####*%/****#*%%%%#***(((((((***/####***#*** ((####*###/(*****#/(###        //                     "
		echo "                           #/     #* *#*###/#####**####(%***/%%*%%%%%#**/%%%%%%**(*(####********/(###((//(#*   #*##*##/###                           "
		echo "                         ((      #/ **#*##*(###(*#/###/%%*#/((/*#%%%##*%*(*###******(/######/* /(#((/*******#####*#*   *###(##/                      "
		echo "                /#      (#*    *###  %*### */(****####*%%* *#%%**%%%#(*%#******#***#####/#** **#*##########*  **(%%%%* #*** (*                       "
		echo "             #/      *###*### (#/###*%*###******/*####*%%****#%****%%%/%%**** *%******(/**********(##%%%(/**#%#**(%%%(**    *#*       *              "
		echo "            #/        #(#####*###  *#%*###(##(########/%(*(***%*******((%**(((*%***#/********#((****/(%#(*******#/****(%##* *#*/ *###*       /       "
		echo "           ( /   (  **#( ####    //*%/################/%(*********************************************(********#*%***%%%%(#*#*  (#((     ###*        "
		echo "         ##     ####   ##   ###(*/ *%*##*******/%%/* ** * *********************/%/***//##########***%%(##** ***#*%***%/%%##*/#** #(   /#/            "
		echo "         (     ### *#((   ##    **/########(/*%%#***(#**%%%%%%*****%*#**(***/#%%(%%%%%#(///*****%%%%%%%%##%%#(***%***(*%%%#/***#*## ##(#*   //       "
		echo "           #   (#( #(     #  *#**/(#%%%%%%#%#%##   ##(**%%##(%****/(#*#***##%%%%%%%%%%%%%%%%%%/%%%%%%#*%**##**%##/****#%%%## **(#* (((    ((         "
		echo "          #*###     **/#/***#%%%(**** *****/*%#***(##**%%%%%******#**#**(#%************* */#%%%%%%#*((####*******(%(#** %%##**(%#*####*              "
		echo "         #(***/#******#*#(*#*****/######((*/*/( **####**#*##%***#  (***##(/**#(((########*#*%%%%#****##%(************%%#*((#****#*   (##(##          "
		echo "       (#%#%%%%%#%%%%%*#**%/***/%%%####%%%*#*#***#(######/*/**/#/*****#%*(*#*(%%#######(*(*%###*(/****#%%%%%%(%%##******%#/****#(#*   #######        "
		echo "    *#% (%/********%%*//*%*(*(*/********** /*#***/*(##(##/######*** *#** **************** #/#*#****#**/####%%%%#%%#*#(#****%( */(#*##(  /####((      "
		echo "   ***%*** *****(**%%*#*#/(##/****** ***********/############/##****#(#%%%%%%#/* *********#*#****#*****##****/##%%%%%%%%##****%(*#*  /##  (*#/#      "
		echo "     ***#***/#(/***%%**(%%%%%%#%%%%%###*****(***#*****####(***** **/* #%%%%%%%%%%%%%%%%%#******#***#***********  (#%%#/***///***(#*   ##  * ##*      "
		echo "    *###********##(*%**(##%%%#%%%#####/*****(*************/////****/* */#(#####%#######/**//((**/*%*****************(********##****(*     (##        "
		echo "   ***#########/(** (/ ***/##*####/*********/****############******# ************/((/*****************(####*(##/****%##/***(#%**(*** #####(          "
		echo "   /(##(####***********#**********//((((((//##***#############***** ////(#######***********************(######(#*###********#**##**#*    ##/         "
		echo "  *################(*/*****//#################****####((((((((/****###*** *(#####((#/*** **********(##########**#*/*/%%%%#**/*#** /(*(*/##   /       "
		echo "  */**/########*/*******%#*(*****##*%(*****###*/**#########(*******%#*%*** **#//%******##****#*#########*####*(****%%#***%(*/##*/****#**####*        "
		echo "  *(#########/***********%*/#/****##*%***** #(#****###########*****##*%/*****#*/%******#********/###########**#***%%***(#*%*#// */******/#           "
		echo "   *############( **/*(#**#**%**** #(*%*/***/###******************* #* (  ***#(*%******#******(#(###########*#** #%***#*#*%***(*(/*(/*/**#           "
		echo "    /###########*/*****(******%*****##*%(/*** ###***************** */#*%*****(#*%******#**/(#//########(/##/*#***%%  *#*#*%** (#**/***#**   #/       "
		echo "    *(###***(##**(((****(**/****%* **/#/*%*/***/###******************(#*%/****#*%#/****#*****/****////(####*(#***%#* (#(*#***********(***  *         "
		echo "     *(################* *(#*#************** * /**/***** **************(*/****#//%*****#******#############*/#***%#*#(//*#*#** / **#****/            "
		echo "       *##(######(#(#***** #****%%%**#*(   */***/********************************/******#** **(####*###(*//* #***%%*/#*(%   /#*(#**#****(#           "
		echo "        *####((#####/**/##****#*******/ * **/********** **** *  ******************************########(#####*##**(%%%%%/* ( #**(#*(***(*             "
		echo "          *####(#########*(***** (#*//(# ** ****                           ***** ***********((###############*##%**/(***/* #**/****                  "
		echo "            */(##****(########(#**#***********                               ****************** ###########****(##%*****/***( **                     "
		echo "                          * *******                <a c6fc project>           ******        **/*****############*/###*#(##**                         "
		echo "                                                                                                      ************** *                               "
		echo
		echo
	fi
}

showCrawlList () {
	if [[ $# -lt 1 ]]; then
		echo "Syntax: $0 list <search_string>"
		echo "Example: $0 list 2021"
		exit 1
	fi

	aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 s3api list-objects-v2 \
		--bucket commoncrawl --prefix cc-index/collections/ --delimiter "/" | \
		jq -r '.CommonPrefixes[].Prefix' | cut -d"/" -f 3 | grep $1
}

showHelp () {
	echo
	echo -e "\e[4m>> Usage: $0 <command> [parameters]\e[0m"
	echo
	echo
	echo -e "\e[4m>> Available commands:\e[0m"
	echo -e "   \e[36mhelp\e[0m"
	echo "      Shows this menu."
	echo
	echo -e "   \e[36mdeploy\e[0m"
	echo "      Deploys the WARCannon architecture to AWS."
	echo
	echo -e "   \e[36mstatus\e[0m"
	echo "      Shows the status of a WARCannon deployment."
	echo
	echo -e "   \e[36mtestLocal [warc_path]\e[0m"
	echo "      Tests your regular expressions against a single commoncrawl warc locally. 'warc_path' is only required the first time it's run."
	echo
	echo -e "   \e[36mtest <warc_path>\e[0m"
	echo "      Tests your regular expressions against a single commoncrawl warc in Lambda."
	echo
	echo -e "   \e[36mlist [search_string]\e[0m"
	echo "      Lists available commoncrawl sets, optionally matching 'search_string'"
	echo
	echo -e "   \e[36mpopulate <crawl> [<num_chunks> <chunk_size>]\e[0m"
	echo "      Populates the queue with warcs from a matching 'crawl'"
	echo
	echo -e "   \e[36mqueryAthena <query>\e[0m"
	echo "      Queries Athena."
	echo
	echo -e "   \e[36mpopulateAthena <queryExecutionId>\e[0m"
	echo "      Populates the queue based on the results of a previously-run Athena query."
	echo
	echo -e "   \e[36memptyQueue\e[0m"
	echo "      Purges the SQS queue of all unfinished work."
	echo
	echo -e "   \e[36mfire\e[0m"
	echo "      Fires the WARCannon"
	echo
	echo -e "   \e[36msyncResults\e[0m"
	echo "      Sync WARCannon results from S3 to ./results/"
	echo
	echo -e "   \e[36mclearResults\e[0m"
	echo "      Delete WARCannon results from S3"
	echo
	echo -e "   \e[36mterminate\e[0m"
	echo "      Terminates all active spot fleet requests tagged by WARCannon."
	echo
	echo
	echo
	echo -e "\e[4m>> Recommended examples:\e[0m"
	echo -e "   \e[37m# Deploy WARCannon\e[0m"
	echo "   $0 deploy"
	echo "   $0 status"
	echo
	echo -e "   \e[37m# Test your deployment in Lambda\e[0m"
	echo "   $0 test crawl-data/CC-MAIN-2020-34/segments/1596439735792.85/warc/CC-MAIN-20200803083123-20200803113123-00033.warc.gz"
	echo
	echo -e "   \e[37m# Prepare a test job\e[0m"
	echo "   $0 list 2021"
	echo "   $0 populate 2021-04 4 10	# Submits only 4 sets of 10 warcs"
	echo "   $0 fire"
	echo
	echo -e "   \e[37m# Prepare a full job\e[0m"
	echo "   $0 list 2021"
	echo "   $0 populate 2021-04		# Submits all 60,000 warcs"
	echo "   $0 fire"
	echo
	echo
}

showShortHelp () {
	echo
	echo -e "	Usage: \e[34m$0 \e[36m<command> [parameters]\e[0m"
	echo -e "	Try \e[34m$0 \e[36mhelp\e[0m"
	echo
}

showStatus () {
	
	echo
	# If warcannon isn't deployed.
	if [[ ! -f userdata.sh ]]; then
		echo -e "	Deployed: [ \e[5m\e[31mNO\e[0m ]; Run \e[7m\e[1m$0 deploy\e[0m to get started."
	else
		echo -ne "	[*] Obtaining service status \e[5m.\e[0m\r"
		AWSACCOUNT=`aws --profile $(jq -r '.awsProfile' settings.json) sts get-caller-identity | jq -r '.Account'`
		QUEUELENGTH=`aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 sqs get-queue-attributes \
			--queue-url "https://sqs.us-east-1.amazonaws.com/${AWSACCOUNT}/warcannon_queue" \
			--attribute-names ApproximateNumberOfMessages | jq -r '.Attributes.ApproximateNumberOfMessages'`

		if [[ QUEUELENGTH -eq 0 ]]; then
			SQSSTATUS="\e[31mEMPTY\e[0m"
		else
			SQSSTATUS="$QUEUELENGTH Messages"
		fi

		STATUSURL=`terraform output cloudfront_url`

		SFRS=`aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 ec2 describe-spot-fleet-requests \
			| jq '.SpotFleetRequestConfigs[] | select(.SpotFleetRequestState=="active") | \
			select((.Tags[]|select(.Key=="Name")|.Value) | match("Warcannon"))'`

		SFRID=`echo $SFRS | jq -r '.SpotFleetRequestId'`;
		STATUS=`echo $SFRS | jq -r '.SpotFleetRequestState'`;
		NODES=`cat settings.json | jq -r '.nodeInstanceType | join(", ")'`;
		CAPACITY=`cat settings.json | jq '.nodeCapacity'`;

		echo -e "	Deployed: [ \e[34mYES\e[0m ]; SQS Status: [ \e[34m${SQSSTATUS}\e[0m ]"
		if [[ `echo $SFRID | wc -c` -lt 4 ]]; then
			echo -e "	Job Status: [ \e[31mINACTIVE\e[0m ]"
		else
			echo -e "	SFR Status: [ \e[34m${STATUS}\e[0m ] [ \e[34m${SFRID}\e[0m ]"
			echo -e "	Requested Nodes: [ \e[34m${CAPACITY}\e[0m x \e[34m${NODES}\e[0m ]; "
		fi
		
		echo -e "	Active job url: \e[34mhttps://${STATUSURL}\e[0m"
	fi

	echo
}

syncResults () {
	#create results folder
	echo "Create results folder."
	if [ ! -d ./results/ ]; then
  		mkdir ./results/;
	fi

	aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 s3 sync \
		s3://`terraform output results_bucket`/ ./results/
}

populateSqs () {

	CRAWL=`aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 s3api list-objects-v2 \
		--bucket commoncrawl --prefix cc-index/collections/ --delimiter "/" | \
		jq -r '.CommonPrefixes[].Prefix' | cut -d"/" -f 3 | grep $1`

	if [[ `echo $CRAWL | wc -c` -lt 4 ]]; then
		echo "$1 does not map to any crawl. Try 'list' first."
		exit 1
	fi

	if [[ `echo $CRAWL | wc -l` -gt 1 ]]; then
		echo "$1 does not map to a unique crawl; got:"
		echo "$CRAWL"
		exit 1
	fi

	if [[ $# -eq 1 ]]; then

		aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 lambda invoke \
			--function-name cc_loader --cli-binary-format raw-in-base64-out --invocation-type RequestResponse \
			--payload "{\"crawl\":\"$CRAWL\"}" /dev/stdout

		exit 0
	fi

	if [[ $# -eq 3 ]]; then

		aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 lambda invoke \
			--function-name cc_loader --cli-binary-format raw-in-base64-out --invocation-type RequestResponse \
			--payload "{\"crawl\":\"$CRAWL\",\"chunk\":$3,\"max\":$2}" /dev/stdout

		exit 0
	fi

	echo "'$0 populate' requires either one parameter or three."
}

populateAthena () {
	aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 lambda invoke \
		--function-name cc_athena_loader --cli-binary-format raw-in-base64-out --invocation-type RequestResponse \
		--payload "{\"queryExecutionId\":\"$1\"}" /dev/stdout

	echo
}

queryAthena () {
	
	AWSPROFILE=`jq -r '.awsProfile' settings.json`

	DATABASE=`terraform output athena_table`
	WORKGROUP=`terraform output athena_workgroup`

	QUERY="$*"

	QUERYEXECID=`aws athena start-query-execution \
		--profile $AWSPROFILE \
		--region us-east-1 \
		--work-group ${WORKGROUP} \
		--query-execution-context Database=${DATABASE} \
		--query-string "${QUERY}" \
		| jq -r '.QueryExecutionId'`

	if [[ $? -ne 0 || "$QUERYEXECID" == "" ]]; then
		echo "[!] Query failed. Unable to proceed."
		exit 1
	fi

	echo -n "[+] Query Exec Id: $QUERYEXECID "

	STATE="QUEUED"
	while [[ "$STATE" == "QUEUED" || "$STATE" == "RUNNING" ]]; do
		sleep 1
		STATE=`aws --profile $AWSPROFILE --region us-east-1 athena get-query-execution --query-execution-id $QUERYEXECID | jq -r '.QueryExecution.Status.State'`
		echo -n "."
	done

	if [[ "$STATE" == "CANCELLED" ]]; then
		echo
		echo "[!] Query entered state 'cancelled'. Unable to proceed."
		exit 1
	fi

	if [[ "$STATE" == "FAILED" ]]; then
		echo
		echo "[!] Query entered state 'failed'. Unable to proceed."
		exit 1
	fi

	echo " SUCCEEDED"
}

terminate () {
	AWSPROFILE=$(jq -r '.awsProfile' settings.json)
	SFRS=`aws --profile $AWSPROFILE --region us-east-1 ec2 describe-spot-fleet-requests | jq '.SpotFleetRequestConfigs[] | select(.SpotFleetRequestState=="active") | select((.Tags[]|select(.Key=="Name")|.Value) | match("Warcannon")) | .SpotFleetRequestId'`

	if [[ `echo $SFRS | wc -l` -lt 1 ]]; then
		echo "[*] There are no WARCannon spot fleets to terminate"
		exit 0
	fi

	echo $SFRS | awk -v profile=$AWSPROFILE ' { system("aws --profile " profile " --region us-east-1 ec2 cancel-spot-fleet-requests --spot-fleet-request-ids " $1 " --terminate-instances") } '
	echo -e "[+] Sent termination requests for [ \e[34m`echo $SFRS | wc -l`\e[0m ] WARCannon spot fleet(s)"
}

testFire () {
	if [ lambda_function/warcannon/matches.js -nt spot_request.json ];  then
		echo -e "[!] \e[36mmatches.js\e[0m has been changed since the last deploy."
		echo -e "    run \e[34m$0 \e[36mdeploy\e[0m and then try again."
		exit 1
	fi

	if [[ "$#" -lt 1 ]]; then
		echo "You must specify a warc path."
		echo "e.g. $0 test crawl-data/CC-MAIN-2020-34/segments/1596439735792.85/warc/CC-MAIN-20200803083123-20200803113123-00033.warc.gz"
		exit 1
	fi

	echo "[+] Running lambda function. This will typically take about 2.5 minutes. Be patient..."
	aws --cli-read-timeout 0 --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 lambda invoke \
		--function-name warcannon --cli-binary-format raw-in-base64-out --invocation-type RequestResponse \
		--payload "{\"warc\":\"$1\"}" /dev/stdout
}

testFireLocal () {
	NODEVERSION=`node --version | cut -d"." -f 1`
	if [[ "$NODEVERSION" != "v12" && "$NODEVERSION" != "v14" ]]; then
		echo "[!] Local execution is only tested on node \e[34mv12\e[0m and \e[34mv14\e[0m. Please switch to a supported version and try again."
		exit 1
	fi

	if [[ "$#" -lt 1 && ! -f /tmp/warcannon.testLocal ]]; then
		echo "You must specify a warc path."
		echo "e.g. $0 testLocal crawl-data/CC-MAIN-2020-34/segments/1596439735792.85/warc/CC-MAIN-20200803083123-20200803113123-00033.warc.gz"
		exit 1
	fi

	if [ ! -f /tmp/warcannon.testLocal ]; then
		echo -e "[*] Downloading warc to \e[36m/tmp/warcannon.testLocal\e[0m."
		aws --profile $(jq -r '.awsProfile' settings.json) --region us-east-1 s3 cp \
			s3://commoncrawl/$1 /tmp/warcannon.testLocal
	else
		echo -e "[*] \e[36m/tmp/warcannon.testLocal\e[0m already exists. Reusing."
	fi

	if [ ! -f /tmp/warcannon.testLocal ]; then
		echo "[*] Error downloading warc. Unable to proceed."
		exit 1
	fi

	rm -f results/testResults.json
	
	#create results folder
	echo "Create results folder."
	if [ ! -d ./results/ ]; then
  		mkdir ./results/;
	fi
	
	echo "[*] Invoking function locally."
	cd lambda_functions/warcannon
	node -e 'require("./main.js").main({}, {}, console.log)'
	if [[ $? -eq 0 && -f ../../results/localResults.json ]]; then
		echo
		echo -e "[+] Local test succeeded. Results were stored to \e[34m./results/localResults.json"
	else
		echo
		echo -e "\e[31m[!] Local test failed."
	fi

	cd ../../
}

verifyStatus () {
	if [[ -f __/spot_request.json ]]; then
		echo "You must run this from the warcannon folder."
		exit 1
	fi


	if [[ ! -f spot_request.json ]]; then
		echo "You must run terraform first!"
		exit 1
	fi
}

case $1 in
	deploy | d)
		showBanner
		deploy
		;;

	emptyQueue)
		verifyStatus
		emptySqs
		;;

	clearResults)
		verifyStatus
		clearResults
		;;

	fire)
		verifyStatus
		fire
		;;

	help | h)
		showHelp
		;;

	list | l)
		showCrawlList $2
		;;

	populate | p)
		verifyStatus
		if [[ $# -eq 2 ]]; then
			populateSqs $2
			exit 0
		fi

		if [[ $# -eq 4 ]]; then
			populateSqs $2 $3 $4
			exit 0
		fi

		echo "[!] 'populate' requires precisely one or three paramters."
		echo
		echo "Syntax: $0 populate <unique_string> [<chunk_size> <num_chunks>]"
		echo "Example (full): $0 populate 2021-04"
		echo "Example (partial): $0 populate 2021-04 4 10"
		echo
		;;

	populateAthena)
		verifyStatus
		populateAthena $2
		;;

	queryAthena | q)
		verifyStatus
		queryAthena $2
		;;

	status | s)
		showStatus
		;;

	syncResults)
		verifyStatus
		syncResults
		;;

	terminate)
		verifyStatus
		terminate
		;;

	test)
		verifyStatus
		testFire $2
		;;

	testLocal)
		verifyStatus
		testFireLocal $2
		;;

	*)
		showBanner
		showStatus
		showShortHelp
		;;
esac
